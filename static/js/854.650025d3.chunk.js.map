{"version":3,"file":"static/js/854.650025d3.chunk.js","mappings":"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","sources":["webpack://flowhero/./src/appFiles/components/Auth/Login.module.scss?947f","appFiles/hooks/useValidation.ts","webpack://flowhero/./src/appFiles/components/Auth/LoginForm/FormElements/TextField.module.scss?eba6","appFiles/components/Auth/LoginForm/FormElements/TextField.tsx","appFiles/components/Auth/LoginForm/FormElements/PasswordTextField.tsx","webpack://flowhero/./src/appFiles/components/Auth/LoginForm/LoginForm.module.scss?71be","appFiles/components/Auth/LoginForm/LoginForm.tsx","appFiles/components/Auth/Login.js","webpack://flowhero/./src/appFiles/components/Auth/LoginForm/FormElements/Checkbox.module.scss?1251","appFiles/components/Auth/LoginForm/FormElements/Checkbox.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"host\":\"Login_host__HJ5T9\",\"firstContainer\":\"Login_firstContainer__kfGLU\",\"headerTopBarContainer\":\"Login_headerTopBarContainer__QWz8Y\",\"firstContainerContent\":\"Login_firstContainerContent__wbbdK\",\"logoWrapper\":\"Login_logoWrapper__xOqDN\",\"processmakerLogo\":\"Login_processmakerLogo__DGHzj\",\"header2\":\"Login_header2__tfUwR\",\"recoverPasswordButton\":\"Login_recoverPasswordButton__FUuDW\",\"secondContainer\":\"Login_secondContainer__BFYgV\",\"bottomButtonsContainer\":\"Login_bottomButtonsContainer__7NrxO\",\"headerTopBar\":\"Login_headerTopBar__RSolU\",\"logoUrlImg\":\"Login_logoUrlImg__UaUon\"};","import * as yup from 'yup';\nimport yupPassword from 'yup-password';\nimport { useMemo } from 'react';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\n\nyupPassword(yup);\nconst regSpecial = /[^A-Za-z0-9]/;\nconst regLower = /[a-z]/;\nconst regUpper = /[A-Z]/;\nconst regNumber = /[0-9]/;\nexport const allRegs: RegExp[] = [regSpecial, regLower, regUpper, regNumber];\n\nexport const useValidation = () => {\n\treturn useMemo(() => {\n\t\treturn {\n\t\t\tyup,\n\t\t\tschemas: {\n\t\t\t\temail: yup.string().min(6, 'Username must have at least 8 characters'),\n\t\t\t\tpassword: yup.string().min(8, 'Password must have at least 8 characters'),\n\t\t\t\t\n\t\t\t\tpasswordRepeat: yup\n\t\t\t\t\t.string()\n\t\t\t\t\t.oneOf([yup.ref('password'), null], 'Passwords does not match')\n\t\t\t\t\t.required('Password repeat is required'),\n\t\t\t\twebsite: yup.string().url(),\n\t\t\t\tphoneNumber: yup.string().test({\n\t\t\t\t\tname: 'phone-pattern',\n\t\t\t\t\tmessage: 'Not a valid phone number',\n\t\t\t\t\ttest: (value = '') => value == '' || isValidPhoneNumber(value),\n\t\t\t\t}),\n\t\t\t\tmobilePhoneNumber: yup.string().test({\n\t\t\t\t\tname: 'mobile-phone-pattern',\n\t\t\t\t\tmessage: 'Not a valid mobile phone number',\n\t\t\t\t\ttest: (value = '') => value == '' || isValidPhoneNumber(value),\n\t\t\t\t}),\n\t\t\t\temployerName: yup.string().required('Employer name is required'),\n\t\t\t},\n\t\t};\n\t}, []);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"inputContainer\":\"TextField_inputContainer__-Li1l\",\"ornament\":\"TextField_ornament__1DMyr\",\"rightButton\":\"TextField_rightButton__miccv\",\"textInput\":\"TextField_textInput__TQ2mO\",\"inputLabel\":\"TextField_inputLabel__IAwPE\",\"errorContainer\":\"TextField_errorContainer__D-YWL\"};","import classNames from 'classnames';\nimport React, { ChangeEventHandler, ComponentProps, forwardRef, ReactNode, useState } from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport cls from './TextField.module.scss';\n\nexport type TextFieldProps = {\n\t/** Label of the input field */\n\tlabel?: string;\n\t/** Check if the field is mandatory or not */\n\thasMandatoryIndicator?: boolean;\n\t/** The text shown within the input field, in the default state */\n\tplaceholder?: string;\n\t/** Number of characters allowed */\n\tcharactersNo?: number;\n\t/** The icon type used for the input field*/\n\ticon?: ReactNode;\n\t/**  Right button for features as show/hide  */\n\trightButtonLabel?: string;\n\trightButtonAction?: () => void;\n\trightButtonClass?: string;\n\t/** Error message */\n\terrorMessage?: string;\n\t/** It is shown below the input field or\n\t * below the error message (if applicable ) */\n\thelpText?: string;\n\ttype?: ComponentProps<'input'>['type'];\n\tisDisabled?: ComponentProps<'input'>['disabled'];\n\treadOnly?: ComponentProps<'input'>['readOnly'];\n\tdefaultValue?: string;\n\tautoComplete?: string;\n} & ComponentProps<'div'> &\n\tPartial<UseFormRegisterReturn>;\n\n/**\n * Text fields allow users to enter text into a UI.\n * They typically appear in create processes or dialogues.\n */\nconst TextField = forwardRef<HTMLInputElement, TextFieldProps>((props, ref) => {\n\tconst { isDisabled = false, readOnly, label = '', hasMandatoryIndicator, placeholder = 'Insert email', charactersNo, icon, rightButtonLabel, rightButtonAction, rightButtonClass, errorMessage, defaultValue, onChange, name, type = 'text', autoComplete, ...rest } = props;\n\tconst [inputValue, setInputValue] = useState(defaultValue ?? '');\n\tconst hasError = Boolean(errorMessage);\n\n\tconst handleChange: ChangeEventHandler<HTMLInputElement> = event => {\n\t\tsetInputValue(event.target.value);\n\t\tonChange?.(event);\n\t};\n\n\treturn (\n\t\t<div {...rest}>\n\t\t\t<Label hasMandatoryIndicator={hasMandatoryIndicator}>{label}</Label>\n\t\t\t<InputContainer hasError={hasError} className={cls.inputContainer}>\n\t\t\t\t<Input\n\t\t\t\t\tapp-readonly={readOnly ? 'readonly' : ''}\n\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\tautoComplete={autoComplete}\n\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\tname={name}\n\t\t\t\t\ttype={type}\n\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\tmaxLength={charactersNo}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tref={ref}\n\t\t\t\t\tclassName={cls.textInput}\n\t\t\t\t/>\n\t\t\t\t{icon && <div className={cls.ornament}>{icon}</div>}\n\t\t\t\t{rightButtonLabel && (\n\t\t\t\t\t<button type={'button'} onClick={rightButtonAction} className={classNames(cls.rightButton, rightButtonClass)}>\n\t\t\t\t\t\t{rightButtonLabel}\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</InputContainer>\n\n\t\t\t{errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n\t\t</div>\n\t);\n});\n\nexport const InputContainer = forwardRef<HTMLDivElement, { hasError: boolean } & ComponentProps<'div'>>((props, ref) => {\n\tconst { className, hasError, ...rest } = props;\n\treturn <div app-error={hasError ? 'error' : ''} ref={ref} {...rest} className={classNames(cls.inputContainer, className)} />;\n});\n\n/**\n * Input contol with applied styling to be used **as inside of `InputContainer`**\n * Uses less bottom margin when active to balance the stronger `border` of the `InputContiner`\n */\nexport const Input = forwardRef<HTMLInputElement, ComponentProps<'input'>>((props, ref) => {\n\tconst { className, ...rest } = props;\n\treturn <input ref={ref} {...rest} className={classNames(cls.textInput, className)} />;\n});\nexport function ErrorMessage(props: ComponentProps<'p'>) {\n\tconst { children, ...rest } = props;\n\treturn (\n\t\t<p className={cls.errorContainer} {...rest}>\n\t\t\t{children}\n\t\t</p>\n\t);\n}\ntype LabelProps = {\n\t/** adds a \"*\"-Indicator to the end of the title that turns red in case of an error */\n\thasMandatoryIndicator?: boolean;\n} & ComponentProps<'label'>;\n\n/**\n * displayed above an `input` control.\n */\nexport function Label(props: LabelProps) {\n\tconst { hasMandatoryIndicator, children, className, ...rest } = props;\n\treturn (\n\t\t<label className={classNames(cls.inputLabel, className)} {...rest}>\n\t\t\t{children}\n\t\t\t{hasMandatoryIndicator && <span className=\"text-danger\">*</span>}\n\t\t</label>\n\t);\n}\nexport default TextField;\n","import { ComponentProps, forwardRef, useState } from 'react';\nimport TextField from './TextField';\n\ntype PasswordTextFieldProps = Omit<ComponentProps<typeof TextField>, 'icon' | 'type'>;\n\n/**\n * Same as `TextField` Component but with special password related features.\n * Shows an Icon at the end of the input to toggle if password is hidden or not.\n * @returns\n */\nconst PasswordTextField = forwardRef<HTMLInputElement, PasswordTextFieldProps>((props, ref) => {\n\tconst [showPassword, setShowPassword] = useState(false);\n\n\treturn <TextField {...props} ref={ref} type={showPassword ? 'text' : 'password'} rightButtonLabel={showPassword ? 'Hide' : 'Show'} rightButtonAction={() => setShowPassword(c => !c)} rightButtonClass={''} />;\n});\n\nexport default PasswordTextField;\n","// extracted by mini-css-extract-plugin\nexport default {\"host\":\"LoginForm_host__UvJwq\",\"title\":\"LoginForm_title__9p60B\",\"text\":\"LoginForm_text__yMnPH\",\"row\":\"LoginForm_row__9D3he\",\"buttons\":\"LoginForm_buttons__spuMH\",\"checkbox\":\"LoginForm_checkbox__d1y1-\",\"checkboxLabel\":\"LoginForm_checkboxLabel__vx8px\",\"signInButton\":\"LoginForm_signInButton__VPwbB\",\"errorMessage\":\"LoginForm_errorMessage__vGOop\",\"recoverPasswordButton\":\"LoginForm_recoverPasswordButton__fDOss\",\"recoverPassword\":\"LoginForm_recoverPassword__Cwkby\"};","\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport classNames from 'classnames';\nimport React, { ComponentProps, memo, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { first } from 'rxjs/operators';\nimport { useValidation } from '../../../hooks/useValidation';\nimport { setOnBoardingComplete, setShowMenu } from '../../../reduxStore/actions/flowActions';\nimport { setIsOnboarding, setOnBoardingModalsVisibility, setOnBoardingVisible } from '../../../reduxStore/actions/modalsActions';\nimport type { StoreType } from '../../../reduxStore/store';\nimport { userLogin } from '../../../services/auth.service';\nimport { Button } from '../../common';\nimport { Checkbox } from './FormElements/Checkbox';\nimport PasswordTextField from './FormElements/PasswordTextField';\nimport TextField, { ErrorMessage } from './FormElements/TextField';\nimport cls from './LoginForm.module.scss';\nimport { isMobile } from 'react-device-detect';\n\nconst accessRestrictedMessage = `This company do not have onboard required data yet!\\nPlease contact comapny admin.\\nBasic company information must be enroled\\nBefore you will be granted access to FlowHero`;\ntype FormType = {\n\temail: string;\n\tpassword: string;\n\trememberMe?: boolean;\n};\n\nexport type LoginFormProps = {\n\tclassName: string;\n\tonLoginSuccess?: () => void;\n\tonResetPassword?: () => void;\n} & ComponentProps<'form'>;\n\nexport const LoginForm = memo((props: LoginFormProps) => {\n\tconst { onLoginSuccess, className, onResetPassword } = props;\n\tconst dispatch = useDispatch();\n\tconst { rememberMe } = useSelector((reduxStore: StoreType) => reduxStore.authReducer.sessionSettings);\n\tconst [loading, setLoading] = useState(false);\n\tconst [responseError, setResponseError] = useState('');\n\tconst { schemas, yup } = useValidation();\n\tconst {\n\t\tregister,\n\t\t\n\t\thandleSubmit,\n\t\tformState: { errors },\n\t\tgetValues,\n\t} = useForm<FormType>({\n\t\tmode: 'onSubmit',\n\t\tcriteriaMode: 'firstError',\n\t\tresolver: yupResolver(\n\t\t\tyup.object().shape({\n\t\t\t\temail: schemas.email,\n\t\t\t\tpassword: schemas.password,\n\t\t\t})\n\t\t),\n\t});\n\n\tconst onSubmit = (_data: FormType) => {\n\t\tsetResponseError('');\n\t\tsetLoading(true);\n\t\tconst { email, password, rememberMe } = getValues();\n\t\tuserLogin({ email: email, password: password, rememberMe: rememberMe })\n\t\t\t.pipe(first())\n\t\t\t.subscribe({\n\t\t\t\tnext: data => {\n\t\t\t\t\tconst { is_admin, onboarding_status } = data;\n\n\t\t\t\t\tif (onboarding_status === false) {\n\t\t\t\t\t\tif (is_admin === true) {\n\t\t\t\t\t\t\tdispatch(setOnBoardingVisible(true));\n\t\t\t\t\t\t\tdispatch(setIsOnboarding(true));\n\t\t\t\t\t\t\tdispatch(setOnBoardingModalsVisibility({ firstModalVisible: true }));\n\t\t\t\t\t\t\tdispatch(setShowMenu(false));\n\t\t\t\t\t\t\tsetLoading(false);\n\t\t\t\t\t\t\t//onLoginSuccess?.();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetResponseError(accessRestrictedMessage);\n\t\t\t\t\t\t\tsetLoading(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatch(setOnBoardingVisible(false));\n\t\t\t\t\t\tdispatch(setIsOnboarding(false));\n\t\t\t\t\t\tdispatch(setOnBoardingComplete(true));\n\t\t\t\t\t\tsetLoading(false);\n\t\t\t\t\t\tonLoginSuccess?.();\n\t\t\t\t\t}\n\t\t\t\t\tdispatch(setShowMenu(true));\n\t\t\t\t},\n\t\t\t\terror: error => {\n\t\t\t\t\tconst extractedError = typeof error.data == 'string' ? error.data : error?.data?.message;\n\t\t\t\t\tsetResponseError(error.status === 422 ? 'Invalid user name or password, please try again.': extractedError );\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t\tconsole.log(error)\n\t\t\t\t},\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit(onSubmit)} className={classNames(cls.host, className)} onClick={()=>setResponseError('')}>\n\t\t\t<div className={cls.row} app-variant=\"first-row\">\n\t\t\t\t<TextField autoComplete={rememberMe ? 'username' : 'new-password'} type=\"text\" placeholder={'Email or Username'} defaultValue={localStorage.getItem('username') ?? ''} {...register('email')}  />\n\t\t\t</div>\n\t\t\t<div className={cls.row} app-variant=\"second-row\">\n\t\t\t\t<PasswordTextField autoComplete={rememberMe ? 'on' : 'off'} placeholder={'Password'} defaultValue={localStorage.getItem('password') ?? ''} {...register('password')}  />\n\t\t\t</div>\n\t\t\t{(responseError || errors.password?.message || errors.email?.message) && <ErrorMessage>{`${responseError ?? ''} ${errors.password?.message ?? ''} ${errors.email?.message ?? ''} `}</ErrorMessage>}\n\t\t\t<Button\n\t\t\t\tdisabled={loading}\n\t\t\t\tloading={loading}\n\t\t\t\ttype={'submit'}\n\t\t\t\ttitle={'Sign in'}\n\t\t\t\tclassName={cls.signInButton}\n\t\t\t/>\n\t\t\t<div className={cls.row} app-variant=\"third-row\">\n\t\t\t\t<Checkbox defaultChecked={rememberMe} checkboxLabel={'Remember me'} {...register('rememberMe')} />\t\t\t\n\t\t\t\t<Button clear type={'button'} title={isMobile ? 'Forgot Password':'Need to find your password?'} className={cls.recoverPasswordButton} clicked={onResetPassword} />\n\t\t\t</div>\t\t\t\t\t\t\t\t\t\n\t\t\t\n\t\t</form>\n\t);\n});\n","import { useEffect, memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { setOnBoardingComplete } from '../../reduxStore/actions/flowActions';\nimport cls from './Login.module.scss';\nimport { LoginForm } from './LoginForm/LoginForm';\nimport { isMobile } from 'react-device-detect';\nimport { resetApplication } from '../../services/auth.service';\nimport { getMasterData } from '../../services/master.service';\nimport { uncachedUrl } from '../../shared/utility';\nimport { store } from '../../reduxStore/store';\nconst Login = memo(() => {\n\tconst navigate = useNavigate();\n\tconst dispatch = useDispatch();\n\n\tuseEffect(() => {\n\t\tdispatch(setOnBoardingComplete(false));\n\t\tresetApplication();\n\t}, []);\n\n\treturn (\n\t\t<div className={cls.host} app-custom-media-show=\"hide\">\n\t\t\t<div className={cls.firstContainer}>\n\t\t\t\t<div className={cls.headerTopBarContainer}>\n\t\t\t\t\t{/* <img alt=\"lg\" src={uncachedUrl('https://processmaker-storage.s3.ap-southeast-2.amazonaws.com/company/logo.png')}\n\t\t\t\t\t\tclassName={cls.logoUrlImg} style={{ height: isMobile ? '120px' : '' }} /> */}\n\t\t\t\t\t{'FlowHero™'}\n\t\t\t\t</div>\n\n\t\t\t\t<div className={cls.firstContainerContent} style={{ width: isMobile ? '70%' : '25%' }}>\n\t\t\t\t\t<LoginForm\n\t\t\t\t\t\tonLoginSuccess={() => {\n\t\t\t\t\t\t\tconst { companyData } = store.getState().flowReducer;\n\n\t\t\t\t\t\t\tif (!(companyData?.status === 'trial_ended' || companyData?.status === 'inactive')) {\n\t\t\t\t\t\t\t\tgetMasterData();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnavigate('/');\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonResetPassword={() => navigate('/reset-password')}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n});\n\nexport default Login;\n","// extracted by mini-css-extract-plugin\nexport default {\"host\":\"Checkbox_host__MtZZg\",\"checkmarkContainer\":\"Checkbox_checkmarkContainer__7m7hu\",\"input\":\"Checkbox_input__fK+n4\",\"checkboxControl\":\"Checkbox_checkboxControl__TezWV\",\"checkboxControlIcon\":\"Checkbox_checkboxControlIcon__5qzo9\",\"checkboxLabel\":\"Checkbox_checkboxLabel__lacXH\",\"checkboxDisabled\":\"Checkbox_checkboxDisabled__Qo2Ag\",\"container\":\"Checkbox_container__Fq10k\",\"list\":\"Checkbox_list__zIAG3\",\"listItem\":\"Checkbox_listItem__eqygo\"};","import React, { ComponentProps, forwardRef, ReactElement } from 'react';\nimport { ErrorMessage, Label } from '../../../common/UI/Select/SelectComponents';\nimport classes from './Checkbox.module.scss';\nimport { Checked } from '../../../../assets/images/icons';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport classNames from 'classnames';\n\nexport type CheckboxContainerProps = {\n\t/** Sets an id to the related elements as required by aria listbox rules. Falls back to `title` if none is provided */\n\tid?: string;\n\t/** Sets a prop for the label */\n\ttitle: string;\n\t/** Sets a prop for the name attribute*/\n\tname: string;\n\t/** Sets an indicator if the field is mandatory */\n\thasMandatoryIndicator?: boolean;\n\t/** Sets an optional prop for an error message in case of an error */\n\terrormessage?: string;\n\t/** Sets an optional prop for a help text*/\n\thelpText?: string;\n\t/** Sets a prop for the children*/\n\tchildren: ReactElement[];\n} & ComponentProps<'input'>;\n\nexport type CheckboxProps = {\n\t/** Sets a prop for the checkbox label */\n\tcheckboxLabel: string;\n\t/** Sets a prop for the name attribute*/\n\tname: string;\n\t/** Sets an indicator if the field is mandatory */\n\thasMandatoryIndicator?: boolean;\n\t/** Sets an optional prop for an error message in case of an error */\n\terrormessage?: string;\n} & ComponentProps<'input'> &\n\tOmit<Partial<UseFormRegisterReturn>, 'onChange'>;\n\nfunction renderChildren(props: CheckboxContainerProps) {\n\treturn React.Children.map(props.children, (child: ReactElement, index: number) => {\n\t\tif (typeof child === 'object')\n\t\t\treturn (\n\t\t\t\t<li key={'checkbox_' + index} className={classes.listItem}>\n\t\t\t\t\t{React.cloneElement(child, {\n\t\t\t\t\t\terrormessage: props.errormessage,\n\t\t\t\t\t})}\n\t\t\t\t</li>\n\t\t\t);\n\t\telse\n\t\t\treturn (\n\t\t\t\t<li key={'checkbox_' + index} className={classes.listItem}>\n\t\t\t\t\t{child}\n\t\t\t\t</li>\n\t\t\t);\n\t});\n}\nconst CheckboxContainer = forwardRef<HTMLInputElement, CheckboxContainerProps>((props: CheckboxContainerProps, ref) => {\n\tconst { title, hasMandatoryIndicator, errormessage, ...rest } = props;\n\treturn (\n\t\t<div className={classes.container} {...rest} ref={ref}>\n\t\t\t<Label hasMandatoryIndicator={hasMandatoryIndicator}>{title}</Label>\n\t\t\t<ul className={classes.list}>{renderChildren(props)}</ul>\n\t\t\t<div>{errormessage && <ErrorMessage>{errormessage}</ErrorMessage>}</div>\n\t\t</div>\n\t);\n});\n\nconst Checkbox = forwardRef<HTMLInputElement, CheckboxProps>((props: CheckboxProps, ref) => {\n\tconst { checkboxLabel, hasMandatoryIndicator, disabled, errormessage, ...rest } = props;\n\n\treturn (\n\t\t<Label\n\t\t\thasMandatoryIndicator={hasMandatoryIndicator}\n\t\t\tclassName={classNames(classes.host, {\n\t\t\t\t[classes.checkboxDisabled]: disabled,\n\t\t\t})}\n\t\t\tapp-checkbox-error={errormessage && errormessage?.length > 0 ? 'error' : 'false'}\n\t\t>\n\t\t\t<span className={classNames(classes.checkmarkContainer)}>\n\t\t\t\t<input ref={ref} className={classNames(classes.input)} type=\"checkbox\" disabled={disabled} {...rest} />\n\t\t\t\t<span className={classNames(classes.checkboxControl)}>\n\t\t\t\t\t<Checked className={classNames(classes.checkboxControlIcon)} />\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t\t<span className={classNames(classes.checkboxLabel)}>{checkboxLabel}</span>\n\t\t</Label>\n\t);\n});\nexport { Checkbox, CheckboxContainer };\n"],"names":["yupPassword","yup","TextField","forwardRef","props","ref","isDisabled","readOnly","label","hasMandatoryIndicator","placeholder","charactersNo","icon","rightButtonLabel","rightButtonAction","rightButtonClass","errorMessage","defaultValue","onChange","name","type","autoComplete","rest","useState","inputValue","setInputValue","hasError","Boolean","Label","InputContainer","className","cls","Input","disabled","value","maxLength","event","target","onClick","classNames","ErrorMessage","children","showPassword","setShowPassword","c","LoginForm","memo","onLoginSuccess","onResetPassword","dispatch","useDispatch","rememberMe","useSelector","reduxStore","authReducer","sessionSettings","loading","setLoading","responseError","setResponseError","useMemo","schemas","email","min","password","passwordRepeat","oneOf","required","website","url","phoneNumber","test","message","isValidPhoneNumber","mobilePhoneNumber","employerName","useForm","mode","criteriaMode","resolver","yupResolver","object","shape","register","handleSubmit","errors","formState","getValues","onSubmit","_data","userLogin","pipe","first","subscribe","next","data","is_admin","onboarding_status","setOnBoardingVisible","setIsOnboarding","setOnBoardingModalsVisibility","firstModalVisible","setShowMenu","setOnBoardingComplete","error","extractedError","status","console","log","localStorage","getItem","title","Checkbox","defaultChecked","checkboxLabel","clear","isMobile","clicked","navigate","useNavigate","useEffect","resetApplication","style","width","companyData","store","flowReducer","getMasterData","errormessage","classes","length"],"sourceRoot":""}
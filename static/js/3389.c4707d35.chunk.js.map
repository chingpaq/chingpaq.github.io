{"version":3,"file":"static/js/3389.c4707d35.chunk.js","mappings":"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","sources":["appFiles/services/processes.service.js"],"sourcesContent":["import queryString from 'query-string';\n\nimport qsSimple from 'qs';\nimport * as R from 'ramda';\nimport { Observable } from 'rxjs';\nimport { first, take } from 'rxjs/operators';\nimport { setComapanyPinnedProcesses, setCompanyProcesses, setSelectedProcess, setLastUpdate, setFilters, updateCompanyProcesses, setMessageBar } from '../reduxStore/actions/flowActions';\nimport { store } from '../reduxStore/store';\nimport { URLS } from './API_CONSTANTS';\nimport { axiosInstance } from './axiosInstance';\nimport moment, { now } from 'moment';\nimport { createNewModule, pinModule } from './module.service';\nimport { CLEAR_TO_SET_DATA } from '../shared/utility';\nimport { getAuthenticatedUser } from './user.service';\nimport { sessionService } from 'redux-react-session';\nimport { setOnBoardingModalsVisibility } from '../reduxStore/actions/modalsActions';\n\nexport const getCompanyProcesses = (page, forced = false) => {\n\tconst { lastUpdates, companyProcesses, axiosAbort } = store.getState().flowReducer;\n\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst config = {\n\t\t...URLS.processes.getAllProcesses(last_access_token, page, moment.utc(forced == true ? 0 : lastUpdates?.procedures ?? 0).format('YYYY-MM-DD HH:mm:ss')),\n\t\thandlerEnabled: true,\n\t\tsignal: axiosAbort.signal\n\t};\n\n\t//console.log('moment diff procedures', moment(now()).diff(moment(lastUpdates.procedures), 'minutes'), companyProcesses.length);\n\n\treturn new Observable(subscriber => {\n\t\tif (forced || moment(now()).diff(moment(lastUpdates.procedures), 'minutes') > 10 || companyProcesses.length === 0) {\n\t\t\taxiosInstance(config)\n\t\t\t\t.then(response => {\n\t\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\t\tconst ascendingProcesses = response?.data?.data?.length > 0 ? R.sortBy(R.prop('name'), response?.data?.data) : [];\n\t\t\t\t\t\tstore.dispatch(setCompanyProcesses(ascendingProcesses, page));\n\t\t\t\t\t\tstore.dispatch(setLastUpdate({ ...lastUpdates, procedures: now() }));\n\t\t\t\t\t\tsubscriber.next(response?.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tsubscriber.error(error);\n\t\t\t\t});\n\t\t} else {\n\t\t\tsubscriber.complete();\n\t\t}\n\t});\n};\nexport const getPinnedProcess = () => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\n\tconst config = {\n\t\t...URLS.processes.getAllPinnedProcesses(last_access_token),\n\t\thandlerEnabled: true,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tstore.dispatch(setComapanyPinnedProcesses(response.data.data));\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const createNewProcess = (processName, processDescription, taskUseOnly) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst data = new FormData();\n\tdata.append('name', processName);\n\tif (processDescription?.length > 0) {\n\t\tdata.append('description', processDescription);\n\t}\n\tdata.append('type', taskUseOnly);\n\tconst defaultConfig = { ...URLS.processes.createNewProcess(last_access_token) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t};\n\tconst { companyProcesses } = store.getState().flowReducer;\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.data && response?.data?.data) {\n\t\t\t\t\tconst ascendingProcesses = companyProcesses.length > 0 ? R.sortBy(R.prop('name'), [...companyProcesses, response.data.data]) : [];\n\n\t\t\t\t\tstore.dispatch(setCompanyProcesses(ascendingProcesses, 1));\n\t\t\t\t\tstore.dispatch(setSelectedProcess({ ...response?.data?.data, registered: true }));\n\t\t\t\t\tstore.dispatch(setMessageBar({ show: true, message: `You have successfully created new process` }));\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const updatingProcessById = (processId, processName, processDescription, taskUseOnly) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tlet data = qsSimple.stringify({\n\t\tname: processName,\n\t\tdescription: processDescription,\n\t\ttype: taskUseOnly,\n\t});\n\tconst defaultConfig = { ...URLS.processes.updateProcessById(last_access_token, processId) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\theaders: { ...defaultConfig.headers },\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t};\n\n\tconst { companyProcesses } = store.getState().flowReducer;\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tstore.dispatch(setCompanyProcesses([...companyProcesses.filter(proc => proc.id !== processId), response?.data?.data], 1));\n\t\t\t\t\tstore.dispatch(setSelectedProcess({ ...response?.data?.data, registered: true }));\n\t\t\t\t\tstore.dispatch(setMessageBar({ show: true, message: `You have successfully updated ${processName}` }));\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const pinProcess = processId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst defaultConfig = { ...URLS.processes.pinProcessById(last_access_token, processId) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\theaders: { ...defaultConfig.headers },\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const unpinProcess = processId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst defaultConfig = { ...URLS.processes.unpinProcessById(last_access_token, processId) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\theaders: { ...defaultConfig.headers },\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const deleteProcessById = processId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst defaultConfig = { ...URLS.processes.deleteProcessById(last_access_token, processId) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\theaders: { ...defaultConfig.headers },\n\t};\n\n\tconst { companyProcesses } = store.getState().flowReducer;\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\tstore.dispatch(\n\t\t\t\t\t\tsetCompanyProcesses(\n\t\t\t\t\t\t\tcompanyProcesses.filter(proc => proc.id !== processId),\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tstore.dispatch(setMessageBar({ show: true, message: `You have successfully deleted process`, color: 'red' }));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const shareProcessToPosition = (process_id, position_id) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tvar data = new FormData();\n\tdata.append('position_id', position_id);\n\n\tconst defaultConfig = { ...URLS.processes.shareProcessToPosition(last_access_token, process_id) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\theaders: { ...defaultConfig.headers },\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const shareProcessToSeveralPositions = (process_id, positions_ids) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tvar data = JSON.stringify({ positions: positions_ids });\n\n\tconst config = {\n\t\t...URLS.processes.shareProcessToSeveralPositions(last_access_token, process_id),\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => subscriber.error(error))\n\t);\n};\nexport const unshareProcessFromSeveralPositions = (process_id, positions_ids) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tvar data = JSON.stringify({ positions: positions_ids });\n\n\tconst config = {\n\t\t...URLS.processes.unshareProcessFromSeveralPositions(last_access_token, process_id),\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => subscriber.error(error))\n\t);\n};\nexport const getProcessById = (processId, simple = false) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\n\tconst config = {\n\t\t...URLS.processes.getProcessById(last_access_token, processId, simple),\n\t\thandlerEnabled: true,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tstore.dispatch(updateCompanyProcesses(response?.data?.data));\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getProcessesFilters = () => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst config = {\n\t\t...URLS.processes.getProcessesFilters(last_access_token),\n\t\thandlerEnabled: true,\n\t};\n\n\tconst { filters } = store.getState().flowReducer;\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tstore.dispatch(setFilters({ ...filters, processes: response?.data?.data }));\n\t\t\t\t\tsubscriber.next(response?.data?.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getFilteredProcesses = sentData => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tvar data = JSON.stringify({ filters: [...sentData] });\n\tconst config = {\n\t\t...URLS.processes.getFilteredProcesses(last_access_token),\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response?.data?.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\n//ProcessSteps\nexport const createNewProcessStepUsingRawJson = sentData => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tlet data = JSON.stringify(sentData);\n\tconst config = {\n\t\t...URLS.processSteps.createNewProcStepUsingRawJson(last_access_token),\n\t\thandlerEnabled: true,\n\t\tdata: data,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif ([200, 201]?.indexOf(response?.status) > -1 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const updateProcessStepById = (sentData, stepId) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tlet data = JSON.stringify(sentData);\n\tconst config = {\n\t\t...URLS.processSteps.updateProcessStepByIdUsingJson(last_access_token, stepId),\n\t\thandlerEnabled: true,\n\t\tdata: data,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif ([200, 201]?.indexOf(response?.status) > -1 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\tstore.dispatch(setMessageBar({ show: true, message: `You have successfully updated a step` }));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const updateProcessStepByJson = (sentData, processId, responseWithAllSteps) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst data = JSON.stringify(sentData);\n\tconst config = {\n\t\t...URLS.processSteps.updateProcessStepByIdUsingJson(last_access_token, processId.concat(responseWithAllSteps ? '?all=1' : '')),\n\t\thandlerEnabled: true,\n\t\tdata: data,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif ([200, 201]?.indexOf(response?.status) > -1 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\tstore.dispatch(setMessageBar({ show: true, message: `You have successfully updated a step` }));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getStepsByProcessId = sentParameters => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst { processId, forStepId, pathways, parentsOnly, details } = sentParameters;\n\tconst query = queryString.stringify(\n\t\t{ pathways: pathways, forStepId: forStepId, parentsOnly: parentsOnly, details: details },\n\t\t{\n\t\t\tskipNull: true,\n\t\t}\n\t);\n\tconst config = {\n\t\t...URLS.processSteps.getStepsByProcessId(last_access_token, processId + (query?.length > 0 ? '?' + query : '')),\n\t\thandlerEnabled: true,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data)\n\t\t\t\t\tif (response?.data?.data) {\n\t\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getAllSteps = () => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\n\tconst config = {\n\t\t...URLS.processSteps.getAllSteps(last_access_token),\n\t\thandlerEnabled: true,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getAllStepsByProcId = processId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\n\tconst config = {\n\t\t...URLS.processSteps.getAllStepsByProcessId(last_access_token, processId),\n\t\thandlerEnabled: true,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const attachStepToParent = (stepId, parent_step_id) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tvar data = new FormData();\n\tdata.append('parent_step_id', parent_step_id);\n\n\tconst config = {\n\t\t...URLS.processSteps.attachStepToParent(last_access_token, stepId),\n\t\thandlerEnabled: true,\n\t\tdata: data,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const deleteStepById = stepId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst config = {\n\t\t...URLS.processSteps.deleteStepById(last_access_token, stepId),\n\t\thandlerEnabled: true,\n\t};\n\n\tconst { companyProcesses } = store.getState().flowReducer;\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.message) {\n\t\t\t\t\tsubscriber.next(response.data.message);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getInheritedComponentsForStep = sentData => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\t// const data = securedQS.stringify(sentData)\n\n\tconst data = JSON.stringify(sentData);\n\tconst config = {\n\t\t...URLS.processSteps.getAllInheritedStepsComponents(last_access_token),\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t\tdata: data,\n\t};\n\t// console.log('getInheritedComponentsForStep, config:', config)\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data)\n\t\t\t\t\tif (response?.data?.data) {\n\t\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getStepInheritedCompsFromParent = (taskId, stepId) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst data = new FormData();\n\tdata.append('task_id', taskId);\n\n\tconst config = {\n\t\t...URLS.processSteps.getStepInheritedComponentsFromParent(last_access_token, stepId),\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t\tdata: data,\n\t};\n\t// console.log('getInheritedComponentsForStep, config:', config)\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data)\n\t\t\t\t\tif (response?.data?.data) {\n\t\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getStepById = stepId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\t// const data = securedQS.stringify(sentData)\n\tconst config = {\n\t\t...URLS.processSteps.getStepById(last_access_token, stepId),\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t};\n\t// console.log('getInheritedComponentsForStep, config:', config)\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data)\n\t\t\t\t\tif (response?.data?.data) {\n\t\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\n\nexport const createProcessTemplate = process => {\n\tconst { companyProcesses } = store.getState().flowReducer;\n\tconst { onBoardingModalsVisibility, onBoardingCompleted } = store.getState().modalsReducer;\n\n\tconst {\n\t\ttemplatesSecond\n\t} = onBoardingModalsVisibility;\n\n\treturn new Observable(subs =>\n\t\tcreateNewProcess(`${process.name}*`, process.description, process?.type)\n\t\t\t.pipe(first())\n\t\t\t.subscribe({\n\t\t\t\tnext: process_data => {\n\t\t\t\t\tlet steps_array = [];\n\t\t\t\t\tprocess.steps.map((step, index) => {\n\t\t\t\t\t\tcreateNewProcessStepUsingRawJson({\n\t\t\t\t\t\t\tname: step?.name,\n\t\t\t\t\t\t\tprocedure_id: process_data.id,\n\t\t\t\t\t\t\tguidance: step?.guidance,\n\t\t\t\t\t\t\trank: step?.rank,\n\t\t\t\t\t\t\toptions: step?.options,\n\t\t\t\t\t\t\tis_start: step?.is_start ?? false,\n\t\t\t\t\t\t\tis_end: step?.is_end ?? false,\n\t\t\t\t\t\t\tcomponent_blueprints: step?.component_blueprints?.map(component => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t...component,\n\t\t\t\t\t\t\t\t\tselected_fields: component?.selected_fields?.map(sf => {\n\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\tid: sf.id,\n\t\t\t\t\t\t\t\t\t\t\tmandatory: sf.mandatory,\n\t\t\t\t\t\t\t\t\t\t\tvisible: sf.visible,\n\t\t\t\t\t\t\t\t\t\t\tindex: sf.index,\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.pipe(first())\n\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\tnext: step_data => {\n\t\t\t\t\t\t\t\t\tsteps_array.push(step_data);\n\n\t\t\t\t\t\t\t\t\tif (process.steps.length == index + 1) {\n\t\t\t\t\t\t\t\t\t\tcreateNewModule(`${process.name}*`, process_data.id, {\n\t\t\t\t\t\t\t\t\t\t\toutputTo: 'component',\n\t\t\t\t\t\t\t\t\t\t}).subscribe({\n\t\t\t\t\t\t\t\t\t\t\tnext: module_data => {\n\t\t\t\t\t\t\t\t\t\t\t\tprocess.steps.map((stp, ix) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (stp?.parent_steps?.length > 0 || stp?.pathway_steps?.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateProcessStepById(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tparent_steps: stp?.parent_steps.map(ps => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn steps_array.find(st => st.name === ps.name && st.rank === ps.rank).id;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpathway_steps: stp?.pathway_steps.map(ps => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn steps_array.find(st => st.name === ps.name && st.rank === ps.rank).id;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsteps_array.find(st => st.name === stp.name && st.rank === stp.rank).id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.pipe(first())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (process.steps.length == ix + 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstore.dispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetCompanyProcesses(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompanyProcesses.filter(pro => pro.id !== process_data.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCLEAR_TO_SET_DATA\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// pinModule(module_data?.id)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t.pipe(first())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\tnext: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\tgetAuthenticatedUser()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\t\t.pipe(first())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\t\t\tnext: data => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\t\t\t\ttemplatesSecond && store.dispatch(setOnBoardingModalsVisibility({ templatesLastVisible: true }));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\t\t\t\tsessionService.saveUser({ ...data });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\t\t\t\tsubs.next(process_data);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetAuthenticatedUser()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.pipe(first())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext: data => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttemplatesSecond && store.dispatch(setOnBoardingModalsVisibility({ templatesLastVisible: true }));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsessionService.saveUser({ ...data });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubs.next(process_data);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (process.steps.length == ix + 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubs.next(process_data);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\terror: error => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubs.error(error);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: error => subs.error(error),\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\terror: error => subs.error(error),\n\t\t\t})\n\t);\n};\n"],"names":["createNewProcess","processName","processDescription","taskUseOnly","sessionSettings","last_access_token","store","authReducer","data","FormData","append","length","defaultConfig","_objectSpread","URLS","config","handlerEnabled","forwardAllErrors","companyProcesses","flowReducer","Observable","subscriber","axiosInstance","then","response","_response$data5","_response$data6","ascendingProcesses","R","setCompanyProcesses","setSelectedProcess","registered","setMessageBar","show","message","next","complete","catch","error","updatingProcessById","processId","qsSimple","name","description","type","headers","_response$data7","_response$data8","_response$data9","status","filter","proc","id","concat","deleteProcessById","color","shareProcessToSeveralPositions","process_id","positions_ids","JSON","stringify","positions","getProcessById","simple","arguments","undefined","_response$data0","_response$data1","updateCompanyProcesses","createNewProcessStepUsingRawJson","sentData","_ref","_response$data15","indexOf","updateProcessStepByJson","responseWithAllSteps","_ref3","_response$data17","getStepsByProcessId","sentParameters","forStepId","pathways","parentsOnly","details","query","queryString","skipNull","_response$data18","deleteStepById","stepId","_response$data22","createProcessTemplate","process","onBoardingModalsVisibility","onBoardingCompleted","modalsReducer","templatesSecond","subs","pipe","first","subscribe","process_data","steps_array","steps","map","step","index","_step$is_start","_step$is_end","_step$component_bluep","procedure_id","guidance","rank","options","is_start","is_end","component_blueprints","component","_component$selected_f","selected_fields","sf","mandatory","visible","step_data","push","createNewModule","outputTo","module_data","stp","ix","_stp$parent_steps","_stp$pathway_steps","parent_steps","pathway_steps","updateProcessStepById","_ref2","_response$data16","ps","find","st","pro","CLEAR_TO_SET_DATA","getAuthenticatedUser","setOnBoardingModalsVisibility","templatesLastVisible","sessionService"],"sourceRoot":""}
{"version":3,"file":"static/js/389.856b7920.chunk.js","mappings":"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","sources":["appFiles/services/processes.service.js"],"sourcesContent":["import queryString from 'query-string';\n\nimport qsSimple from 'qs';\nimport * as R from 'ramda';\nimport { Observable } from 'rxjs';\nimport { first, take } from 'rxjs/operators';\nimport { setComapanyPinnedProcesses, setCompanyProcesses, setSelectedProcess, setLastUpdate, setFilters, updateCompanyProcesses, setMessageBar } from '../reduxStore/actions/flowActions';\nimport { store } from '../reduxStore/store';\nimport { URLS } from './API_CONSTANTS';\nimport { axiosInstance } from './axiosInstance';\nimport moment, { now } from 'moment';\nimport { createNewModule, pinModule } from './module.service';\nimport { CLEAR_TO_SET_DATA } from '../shared/utility';\nimport { getAuthenticatedUser } from './user.service';\nimport { sessionService } from 'redux-react-session';\nimport { setOnBoardingModalsVisibility } from '../reduxStore/actions/modalsActions';\n\nexport const getCompanyProcesses = (page, forced = false) => {\n\tconst { lastUpdates, companyProcesses, axiosAbort } = store.getState().flowReducer;\n\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst config = {\n\t\t...URLS.processes.getAllProcesses(last_access_token, page, moment.utc(forced == true ? 0 : lastUpdates?.procedures ?? 0).format('YYYY-MM-DD HH:mm:ss')),\n\t\thandlerEnabled: true,\n\t\tsignal: axiosAbort.signal\n\t};\n\n\t//console.log('moment diff procedures', moment(now()).diff(moment(lastUpdates.procedures), 'minutes'), companyProcesses.length);\n\n\treturn new Observable(subscriber => {\n\t\tif (forced || moment(now()).diff(moment(lastUpdates.procedures), 'minutes') > 10 || companyProcesses.length === 0) {\n\t\t\taxiosInstance(config)\n\t\t\t\t.then(response => {\n\t\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\t\tconst ascendingProcesses = response?.data?.data?.length > 0 ? R.sortBy(R.prop('name'), response?.data?.data) : [];\n\t\t\t\t\t\tstore.dispatch(setCompanyProcesses(ascendingProcesses, page));\n\t\t\t\t\t\tstore.dispatch(setLastUpdate({ ...lastUpdates, procedures: now() }));\n\t\t\t\t\t\tsubscriber.next(response?.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tsubscriber.error(error);\n\t\t\t\t});\n\t\t} else {\n\t\t\tsubscriber.complete();\n\t\t}\n\t});\n};\nexport const getPinnedProcess = () => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\n\tconst config = {\n\t\t...URLS.processes.getAllPinnedProcesses(last_access_token),\n\t\thandlerEnabled: true,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tstore.dispatch(setComapanyPinnedProcesses(response.data.data));\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const createNewProcess = (processName, processDescription, taskUseOnly) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst data = new FormData();\n\tdata.append('name', processName);\n\tif (processDescription?.length > 0) {\n\t\tdata.append('description', processDescription);\n\t}\n\tdata.append('type', taskUseOnly);\n\tconst defaultConfig = { ...URLS.processes.createNewProcess(last_access_token) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t};\n\tconst { companyProcesses } = store.getState().flowReducer;\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.data && response?.data?.data) {\n\t\t\t\t\tconst ascendingProcesses = companyProcesses.length > 0 ? R.sortBy(R.prop('name'), [...companyProcesses, response.data.data]) : [];\n\n\t\t\t\t\tstore.dispatch(setCompanyProcesses(ascendingProcesses, 1));\n\t\t\t\t\tstore.dispatch(setSelectedProcess({ ...response?.data?.data, registered: true }));\n\t\t\t\t\tstore.dispatch(setMessageBar({ show: true, message: `You have successfully created new process` }));\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const updatingProcessById = (processId, processName, processDescription, taskUseOnly) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tlet data = qsSimple.stringify({\n\t\tname: processName,\n\t\tdescription: processDescription,\n\t\ttype: taskUseOnly,\n\t});\n\tconst defaultConfig = { ...URLS.processes.updateProcessById(last_access_token, processId) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\theaders: { ...defaultConfig.headers },\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t};\n\n\tconst { companyProcesses } = store.getState().flowReducer;\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tstore.dispatch(setCompanyProcesses([...companyProcesses.filter(proc => proc.id !== processId), response?.data?.data], 1));\n\t\t\t\t\tstore.dispatch(setSelectedProcess({ ...response?.data?.data, registered: true }));\n\t\t\t\t\tstore.dispatch(setMessageBar({ show: true, message: `You have successfully updated ${processName}` }));\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const pinProcess = processId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst defaultConfig = { ...URLS.processes.pinProcessById(last_access_token, processId) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\theaders: { ...defaultConfig.headers },\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const unpinProcess = processId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst defaultConfig = { ...URLS.processes.unpinProcessById(last_access_token, processId) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\theaders: { ...defaultConfig.headers },\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const deleteProcessById = processId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst defaultConfig = { ...URLS.processes.deleteProcessById(last_access_token, processId) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\theaders: { ...defaultConfig.headers },\n\t};\n\n\tconst { companyProcesses } = store.getState().flowReducer;\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\tstore.dispatch(\n\t\t\t\t\t\tsetCompanyProcesses(\n\t\t\t\t\t\t\tcompanyProcesses.filter(proc => proc.id !== processId),\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tstore.dispatch(setMessageBar({ show: true, message: `You have successfully deleted process`, color: 'red' }));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const shareProcessToPosition = (process_id, position_id) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tvar data = new FormData();\n\tdata.append('position_id', position_id);\n\n\tconst defaultConfig = { ...URLS.processes.shareProcessToPosition(last_access_token, process_id) };\n\tconst config = {\n\t\t...defaultConfig,\n\t\theaders: { ...defaultConfig.headers },\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const shareProcessToSeveralPositions = (process_id, positions_ids) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tvar data = JSON.stringify({ positions: positions_ids });\n\n\tconst config = {\n\t\t...URLS.processes.shareProcessToSeveralPositions(last_access_token, process_id),\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => subscriber.error(error))\n\t);\n};\nexport const unshareProcessFromSeveralPositions = (process_id, positions_ids) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tvar data = JSON.stringify({ positions: positions_ids });\n\n\tconst config = {\n\t\t...URLS.processes.unshareProcessFromSeveralPositions(last_access_token, process_id),\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data) {\n\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => subscriber.error(error))\n\t);\n};\nexport const getProcessById = (processId, simple = false) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\n\tconst config = {\n\t\t...URLS.processes.getProcessById(last_access_token, processId, simple),\n\t\thandlerEnabled: true,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tstore.dispatch(updateCompanyProcesses(response?.data?.data));\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getProcessesFilters = () => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst config = {\n\t\t...URLS.processes.getProcessesFilters(last_access_token),\n\t\thandlerEnabled: true,\n\t};\n\n\tconst { filters } = store.getState().flowReducer;\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tstore.dispatch(setFilters({ ...filters, processes: response?.data?.data }));\n\t\t\t\t\tsubscriber.next(response?.data?.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getFilteredProcesses = sentData => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tvar data = JSON.stringify({ filters: [...sentData] });\n\tconst config = {\n\t\t...URLS.processes.getFilteredProcesses(last_access_token),\n\t\tdata: data,\n\t\thandlerEnabled: true,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response?.data?.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\n//ProcessSteps\nexport const createNewProcessStepUsingRawJson = sentData => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tlet data = JSON.stringify(sentData);\n\tconst config = {\n\t\t...URLS.processSteps.createNewProcStepUsingRawJson(last_access_token),\n\t\thandlerEnabled: true,\n\t\tdata: data,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif ([200, 201]?.indexOf(response?.status) > -1 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const updateProcessStepById = (sentData, stepId) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tlet data = JSON.stringify(sentData);\n\tconst config = {\n\t\t...URLS.processSteps.updateProcessStepByIdUsingJson(last_access_token, stepId),\n\t\thandlerEnabled: true,\n\t\tdata: data,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif ([200, 201]?.indexOf(response?.status) > -1 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\tstore.dispatch(setMessageBar({ show: true, message: `You have successfully updated a step` }));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const updateProcessStepByJson = (sentData, processId, responseWithAllSteps) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst data = JSON.stringify(sentData);\n\tconst config = {\n\t\t...URLS.processSteps.updateProcessStepByIdUsingJson(last_access_token, processId.concat(responseWithAllSteps ? '?all=1' : '')),\n\t\thandlerEnabled: true,\n\t\tdata: data,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif ([200, 201]?.indexOf(response?.status) > -1 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\tstore.dispatch(setMessageBar({ show: true, message: `You have successfully updated a step` }));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getStepsByProcessId = sentParameters => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst { processId, forStepId, pathways, parentsOnly, details } = sentParameters;\n\tconst query = queryString.stringify(\n\t\t{ pathways: pathways, forStepId: forStepId, parentsOnly: parentsOnly, details: details },\n\t\t{\n\t\t\tskipNull: true,\n\t\t}\n\t);\n\tconst config = {\n\t\t...URLS.processSteps.getStepsByProcessId(last_access_token, processId + (query?.length > 0 ? '?' + query : '')),\n\t\thandlerEnabled: true,\n\t};\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data)\n\t\t\t\t\tif (response?.data?.data) {\n\t\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getAllSteps = () => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\n\tconst config = {\n\t\t...URLS.processSteps.getAllSteps(last_access_token),\n\t\thandlerEnabled: true,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getAllStepsByProcId = processId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\n\tconst config = {\n\t\t...URLS.processSteps.getAllStepsByProcessId(last_access_token, processId),\n\t\thandlerEnabled: true,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const attachStepToParent = (stepId, parent_step_id) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tvar data = new FormData();\n\tdata.append('parent_step_id', parent_step_id);\n\n\tconst config = {\n\t\t...URLS.processSteps.attachStepToParent(last_access_token, stepId),\n\t\thandlerEnabled: true,\n\t\tdata: data,\n\t};\n\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.data) {\n\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const deleteStepById = stepId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst config = {\n\t\t...URLS.processSteps.deleteStepById(last_access_token, stepId),\n\t\thandlerEnabled: true,\n\t};\n\n\tconst { companyProcesses } = store.getState().flowReducer;\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data && response?.data?.message) {\n\t\t\t\t\tsubscriber.next(response.data.message);\n\t\t\t\t\tsubscriber.complete();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getInheritedComponentsForStep = sentData => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\t// const data = securedQS.stringify(sentData)\n\n\tconst data = JSON.stringify(sentData);\n\tconst config = {\n\t\t...URLS.processSteps.getAllInheritedStepsComponents(last_access_token),\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t\tdata: data,\n\t};\n\t// console.log('getInheritedComponentsForStep, config:', config)\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data)\n\t\t\t\t\tif (response?.data?.data) {\n\t\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getStepInheritedCompsFromParent = (taskId, stepId) => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\tconst data = new FormData();\n\tdata.append('task_id', taskId);\n\n\tconst config = {\n\t\t...URLS.processSteps.getStepInheritedComponentsFromParent(last_access_token, stepId),\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t\tdata: data,\n\t};\n\t// console.log('getInheritedComponentsForStep, config:', config)\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data)\n\t\t\t\t\tif (response?.data?.data) {\n\t\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\nexport const getStepById = stepId => {\n\tconst {\n\t\tsessionSettings: { last_access_token },\n\t} = store.getState().authReducer;\n\t// const data = securedQS.stringify(sentData)\n\tconst config = {\n\t\t...URLS.processSteps.getStepById(last_access_token, stepId),\n\t\thandlerEnabled: true,\n\t\tforwardAllErrors: true,\n\t};\n\t// console.log('getInheritedComponentsForStep, config:', config)\n\treturn new Observable(subscriber =>\n\t\taxiosInstance(config)\n\t\t\t.then(response => {\n\t\t\t\tif (response?.status == 200 && response?.data)\n\t\t\t\t\tif (response?.data?.data) {\n\t\t\t\t\t\tsubscriber.next(response.data.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubscriber.next(response.data);\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsubscriber.error(error);\n\t\t\t})\n\t);\n};\n\nexport const createProcessTemplate = process => {\n\tconst { companyProcesses } = store.getState().flowReducer;\n\tconst { onBoardingModalsVisibility, onBoardingCompleted } = store.getState().modalsReducer;\n\n\tconst {\n\t\ttemplatesSecond\n\t} = onBoardingModalsVisibility;\n\n\treturn new Observable(subs =>\n\t\tcreateNewProcess(`${process.name}*`, process.description, process?.type)\n\t\t\t.pipe(first())\n\t\t\t.subscribe({\n\t\t\t\tnext: process_data => {\n\t\t\t\t\tlet steps_array = [];\n\t\t\t\t\tprocess.steps.map((step, index) => {\n\t\t\t\t\t\tcreateNewProcessStepUsingRawJson({\n\t\t\t\t\t\t\tname: step?.name,\n\t\t\t\t\t\t\tprocedure_id: process_data.id,\n\t\t\t\t\t\t\tguidance: step?.guidance,\n\t\t\t\t\t\t\trank: step?.rank,\n\t\t\t\t\t\t\toptions: step?.options,\n\t\t\t\t\t\t\tis_start: step?.is_start ?? false,\n\t\t\t\t\t\t\tis_end: step?.is_end ?? false,\n\t\t\t\t\t\t\tcomponent_blueprints: step?.component_blueprints?.map(component => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t...component,\n\t\t\t\t\t\t\t\t\tselected_fields: component?.selected_fields?.map(sf => {\n\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\tid: sf.id,\n\t\t\t\t\t\t\t\t\t\t\tmandatory: sf.mandatory,\n\t\t\t\t\t\t\t\t\t\t\tvisible: sf.visible,\n\t\t\t\t\t\t\t\t\t\t\tindex: sf.index,\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.pipe(first())\n\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\tnext: step_data => {\n\t\t\t\t\t\t\t\t\tsteps_array.push(step_data);\n\n\t\t\t\t\t\t\t\t\tif (process.steps.length == index + 1) {\n\t\t\t\t\t\t\t\t\t\tcreateNewModule(`${process.name}*`, process_data.id, {\n\t\t\t\t\t\t\t\t\t\t\toutputTo: 'component',\n\t\t\t\t\t\t\t\t\t\t}).subscribe({\n\t\t\t\t\t\t\t\t\t\t\tnext: module_data => {\n\t\t\t\t\t\t\t\t\t\t\t\tprocess.steps.map((stp, ix) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (stp?.parent_steps?.length > 0 || stp?.pathway_steps?.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateProcessStepById(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tparent_steps: stp?.parent_steps.map(ps => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn steps_array.find(st => st.name === ps.name && st.rank === ps.rank).id;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpathway_steps: stp?.pathway_steps.map(ps => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn steps_array.find(st => st.name === ps.name && st.rank === ps.rank).id;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsteps_array.find(st => st.name === stp.name && st.rank === stp.rank).id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.pipe(first())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (process.steps.length == ix + 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstore.dispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetCompanyProcesses(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcompanyProcesses.filter(pro => pro.id !== process_data.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCLEAR_TO_SET_DATA\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpinModule(module_data?.id)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.pipe(first())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetAuthenticatedUser()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.pipe(first())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext: data => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttemplatesSecond && store.dispatch(setOnBoardingModalsVisibility({ templatesLastVisible: true }));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsessionService.saveUser({ ...data });\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubs.next(process_data);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (process.steps.length == ix + 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubs.next(process_data);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\terror: error => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubs.error(error);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: error => subs.error(error),\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\terror: error => subs.error(error),\n\t\t\t})\n\t);\n};\n"],"names":["createNewProcess","processName","processDescription","taskUseOnly","last_access_token","store","authReducer","sessionSettings","data","FormData","append","length","defaultConfig","_objectSpread","URLS","config","handlerEnabled","forwardAllErrors","companyProcesses","flowReducer","Observable","subscriber","axiosInstance","then","response","_response$data5","_response$data6","ascendingProcesses","R","concat","_toConsumableArray","setCompanyProcesses","setSelectedProcess","registered","setMessageBar","show","message","next","complete","catch","error","updatingProcessById","processId","qsSimple","name","description","type","headers","_response$data7","_response$data8","_response$data9","status","filter","proc","id","deleteProcessById","color","shareProcessToSeveralPositions","process_id","positions_ids","JSON","stringify","positions","getProcessById","simple","arguments","undefined","_response$data10","_response$data11","updateCompanyProcesses","createNewProcessStepUsingRawJson","sentData","_ref","_response$data17","indexOf","updateProcessStepByJson","responseWithAllSteps","_ref3","_response$data19","getStepsByProcessId","sentParameters","forStepId","pathways","parentsOnly","details","query","queryString","skipNull","_response$data20","deleteStepById","stepId","_response$data24","createProcessTemplate","process","_store$getState$modal","modalsReducer","onBoardingModalsVisibility","templatesSecond","onBoardingCompleted","subs","pipe","first","subscribe","process_data","steps_array","steps","map","step","index","_step$is_start","_step$is_end","_step$component_bluep","procedure_id","guidance","rank","options","is_start","is_end","component_blueprints","component","_component$selected_f","selected_fields","sf","mandatory","visible","step_data","push","createNewModule","outputTo","module_data","stp","ix","_stp$parent_steps","_stp$pathway_steps","parent_steps","pathway_steps","_ref2","_response$data18","updateProcessStepById","ps","find","st","pro","CLEAR_TO_SET_DATA","pinModule","getAuthenticatedUser","setOnBoardingModalsVisibility","templatesLastVisible","sessionService"],"sourceRoot":""}